input {
    rabbitmq {
        host => "event-itb.grid.iu.edu"
        vhost => "gratia"
        exchange => "gracc.osg-itb.raw"
        user = "USERNAME"
        password = "PASSWORD"
        codec => "plain"
        type => "JobUsageRecord"
    }
}
filter {
    xml {
        source => "message"
        store_xml => false
        remove_namespaces => true
        xpath => [
            "/JobUsageRecord/RecordIdentity/@recordId", "RecordId",
            "/JobUsageRecord/RecordIdentity/@createTime", "CreateTime",
            "/JobUsageRecord/JobIdentity/GlobalJobId/text()", "GlobalJobId",
            "/JobUsageRecord/JobIdentity/LocalJobId/text()", "LocalJobId",
            "/JobUsageRecord/UserIdentity/GlobalUsername/text()", "GlobalUsername",
            "/JobUsageRecord/UserIdentity/LocalUserId/text()", "LocalUserId",
            "/JobUsageRecord/UserIdentity/VOName/text()", "VOName",
            "/JobUsageRecord/UserIdentity/ReportableVOName/text()", "ReportableVOName",
            "/JobUsageRecord/UserIdentity/CommonName/text()", "CommonName",
            "/JobUsageRecord/JobName/text()", "JobName",
            "/JobUsageRecord/Status/text()", "Status[value]",
            "/JobUsageRecord/Status/@description", "Status[description]",
            "/JobUsageRecord/WallDuration/text()", "WallDuration[iso8601]",
            "/JobUsageRecord/CpuDuration[@usageType='system']/text()", "CpuDurationSystem[iso8601]",
            "/JobUsageRecord/CpuDuration[@usageType='user']/text()", "CpuDurationUser[iso8601]",
            "/JobUsageRecord/Processors[@metric='total']/text()", "Processors[value]",
            "/JobUsageRecord/Processors[@metric='total']/@consumptionRate", "Processors[consumptionRate]",
            "/JobUsageRecord/StartTime/text()", "StartTime",
            "/JobUsageRecord/EndTime/text()", "EndTime",
            "/JobUsageRecord/MachineName/text()", "MachineName[value]",
            "/JobUsageRecord/MachineName/@description", "MachineName[description]",
            "/JobUsageRecord/SiteName/text()", "SiteName",
            "/JobUsageRecord/Queue/text()", "Queue[value]",
            "/JobUsageRecord/Queue/@description", "Queue[description]",
            "/JobUsageRecord/Host/text()", "Host[value]",
            "/JobUsageRecord/Host/@description", "Host[description]",
            "/JobUsageRecord/Memory[@metric='total']/text()", "Memory[value]",
            "/JobUsageRecord/Memory[@metric='total']/@phaseUnit", "Memory[phaseUnit]",
            "/JobUsageRecord/Memory[@metric='total']/@storageUnit", "Memory[storageUnit]",
            "/JobUsageRecord/Swap[@metric='total']/text()", "Swap[value]",
            "/JobUsageRecord/Swap[@metric='total']/@phaseUnit", "Swap[phaseUnit]",
            "/JobUsageRecord/Swap[@metric='total']/@storageUnit", "Swap[storageUnit]",
            "/JobUsageRecord/TimeInstant/text()", "TimeInstant[value]",
            "/JobUsageRecord/TimeInstant/@description", "TimeInstant[description]",
            "/JobUsageRecord/TimeDuration/text()", "TimeDuration_value",
            "/JobUsageRecord/TimeDuration/@type", "TimeDuration_type",
            "/JobUsageRecord/Resource/text()", "Resource_value",
            "/JobUsageRecord/Resource/@description", "Resource_description",
            "/JobUsageRecord/ProbeName/text()", "ProbeName",
            "/JobUsageRecord/Grid/text()", "Grid"
        ]
    }
    # use EndTime as logstash timestamp
    if [EndTime] {
        mutate {
            rename => { "@timestamp" => "@received" }
        }
        date {
            match => [ 'EndTime', 'ISO8601' ]
        }
    }
    # calculate checksum for id
    ruby {
        code => "
            require 'openssl'
            key = event['RecordId'] || event['GlobalJobId'] || Random.rand().to_s
            event['checksum'] = OpenSSL::Digest.hexdigest('md5',key)
        "
    }
    # restructure Resources
    ruby {
        code => "
            event['Resource_value'].zip(event['Resource_description']).each do |value,description|
                event['Resource'] ||= {}
                event['Resource'][description.gsub(/\./, '_')] = value
            end"
        remove_field => ["Resource_value", "Resource_description"]
    }
    # restructure TimeDurations
    ruby {
        code => "
            if event['TimeDuration_value']
                event['TimeDuration_value'].zip(event['TimeDuration_type']).each do |value,description|
                    event['TimeDuration'] ||= {}
                    event['TimeDuration'][description.gsub(/\./, '_')] = value
                end
            end"
            remove_field => ["TimeDuration_value", "TimeDuration_type"]
    }
    # convert durations to seconds
    # simple regex should probably be replaced with something more robust
    ruby {
        code => "
            def durationToSeconds(iso)
                /PT(?:(?<days>[\d\.]+)D)?(?:(?<hours>[\d\.]+)H)?(?:(?<minutes>[\d\.]+)M)?(?:(?<seconds>[\d\.]+)S)?/ =~ iso
                s = (seconds||'0').to_f
                s += (minutes||'0').to_f*60
                s += (hours||'0').to_f*60*60
                s += (days||'0').to_f*60*60*24
            end
            for type in ['WallDuration', 'CpuDurationSystem','CpuDurationUser']
                if event[type]
                    event[type]['seconds'] = durationToSeconds(event[type]['iso8601'][0] || '')
                end
            end
            # sum CPU durations
            if event['CpuDurationUser'] && event['CpuDurationSystem']
                event['CpuDuration'] = {'seconds' => event['CpuDurationUser']['seconds']+event['CpuDurationSystem']['seconds']}
            end"
    }
}
output {
    elasticsearch {
        hosts => [ "localhost:9200" ]
        index => "gracc-osg-itb-%{+YYYY.MM.dd}"
        document_id => "%{checksum}"
        template_name => "gracc-*"
        template => "/home/kretzke/gracc-template.json"
        manage_template => true
        template_overwrite => true
    }
    #stdout {codec => "rubydebug"}
}
